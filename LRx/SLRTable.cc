int _expr = 1, _term = 3, _factor = 2, _exponent = 0;

int _plus = 4, _minus = 5, _times = 3, 
    _mod = 0, _power = 7, _leftpar = 1, 
    _rightpar = 2, _eof = 8, _num = 9, _divide = 6;

// how do terminals map to indices: 
// "%" -> 0; "(" -> 1; ")" -> 2; "*" -> 3; "+" -> 4;
// "-" -> 5; "/" -> 6; "^" -> 7; eof -> 8; num -> 9;
int SLRActionTable[21][10] = {
        { -1, 6, -1, -1, -1, -1, -1, -1, -1, 5, },
        { -1, -1, -1, -1, 7, 8, -1, -1, 0, -1, },
        { 9, -1, 258, 11, 258, 258, 10, -1, 258, -1, },
        { 262, -1, 262, 262, 262, 262, 262, 12, 262, -1, },
        { 264, -1, 264, 264, 264, 264, 264, 264, 264, -1, },
        { 266, -1, 266, 266, 266, 266, 266, 266, 266, -1, },
        { -1, 6, -1, -1, -1, -1, -1, -1, -1, 5, },
        { -1, 6, -1, -1, -1, -1, -1, -1, -1, 5, },
        { -1, 6, -1, -1, -1, -1, -1, -1, -1, 5, },
        { -1, 6, -1, -1, -1, -1, -1, -1, -1, 5, },
        { -1, 6, -1, -1, -1, -1, -1, -1, -1, 5, },
        { -1, 6, -1, -1, -1, -1, -1, -1, -1, 5, },
        { -1, 6, -1, -1, -1, -1, -1, -1, -1, 5, },
        { -1, -1, 20, -1, 7, 8, -1, -1, -1, -1, },
        { 9, -1, 256, 11, 256, 256, 10, -1, 256, -1, },
        { 9, -1, 257, 11, 257, 257, 10, -1, 257, -1, },
        { 261, -1, 261, 261, 261, 261, 261, 12, 261, -1, },
        { 260, -1, 260, 260, 260, 260, 260, 12, 260, -1, },
        { 259, -1, 259, 259, 259, 259, 259, 12, 259, -1, },
        { 263, -1, 263, 263, 263, 263, 263, 263, 263, -1, },
        { 265, -1, 265, 265, 265, 265, 265, 265, 265, -1, },
};

// how do terminals map to indices: 
// <exponent> -> 0; <expr> -> 1; <factor> -> 2; <term> -> 3;
int SLRGotoTable[13][4] = {
        { 4, 1, 3, 2, },
        { -1, -1, -1, -1, },
        { -1, -1, -1, -1, },
        { -1, -1, -1, -1, },
        { -1, -1, -1, -1, },
        { -1, -1, -1, -1, },
        { 4, 13, 3, 2, },
        { 4, -1, 3, 14, },
        { 4, -1, 3, 15, },
        { 4, -1, 16, -1, },
        { 4, -1, 17, -1, },
        { 4, -1, 18, -1, },
        { 19, -1, -1, -1, },
};
